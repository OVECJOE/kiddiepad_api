swagger: "2.0"
info:
  title: "KiddiePad API Docs"
  version: 1.0.0
  description: "This API was created to power the frontend of KiddiePad web application and must be used for such. It exposes powerful endpoints that interacts with a mongodb database in complex ways to perform advanced CRUD operations."
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT.html
  contact:
    name: KiddiePad
    url: https://github.com/OVECJOE
    email: ovecjoe123@gmail.com

host: "kiddiepad-api.herokuapp.com"
# host: "localhost:3000"
basePath: "/api/v1"
tags:
  - name: "User"
    description: "Operations about user. Note that every KiddiePad user is a reader."
  - name: "Writer"
    description: "Operations about writer - the 'less-than-18' user that is a valid KiddiePad writer."
  - name: "Book"
    description: "Operations about book - the e-contents created by young writers."
  - name: "Chapter"
    description: "Operations about chapter. Each chapter is associated with a book."
  - name: "Review"
    description: "Operations about review. Each book can be made up of several reviews."
  - name: "Donator"
    description: "Operations about donator. A donator document is created during first donation."

schemes:
  - "http"
  - "https"

paths:
  /register:
    post:
      tags:
        - "User"
      summary: "Create new KiddiePad user"
      operationId: "registerUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "body"
          description: "User object that needs to be created in the database"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "All input is required"
        "409":
          description: "User already exist. Please Login!"
        "500":
          description: "Cannot register user at the moment, try again later."
      security:
        - apiKey: [write, read]
  /login:
    post:
      tags:
        - "User"
      summary: "Login existing KiddiePad user"
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: body
          required: true
          description: "Needs email and password to login in"
          schema:
            required:
              - "email"
              - "password"
            properties:
              email:
                type: "string"
                example: "abcd1234@gmail.com"
              password:
                type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "All input is required"
        "406":
          description: "Invalid Credentials"
      security:
        - apiKey: [write, read]
  /users:
    get:
      tags:
        - "User"
      summary: "Get all KiddiePad users"
      operationId: "getUsers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "500":
          description: "Could not get the list of users."
      security:
        - apiKey: [write, read]
  /users/{userId}:
    get:
      tags:
        - "User"
      summary: "Find a KiddiePad user by id"
      operationId: "getUserById"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: path
          description: "User Id to filter by"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User with given id not found."
      security:
        - apiKey: [write, read]
  /users/{userId}/delete:
    delete:
      tags:
        - "User"
      summary: Delete a KiddiePad user if isWriter = false
      operationId: "deleteUserById"
      produces:
        - "application/json"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "User deleted successfully."
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Could delete a writer."
        "404":
          description: "User with given id not found."
        "500":
          description: "Could not delete user at the moment."
      security:
        - apiKey: [write, read]
  /users/{userId}/follow/{writerId}:
    put:
      tags:
        - "User"
      summary: "Follow a KiddiePad writer"
      description: "Please do note that a KiddiePad writer is still a user, and can also follow other writers."
      operationId: "followWriter"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "writerId"
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "User is now following writer."
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "User with given id is not a writer"
        "404":
          description: "User/Writer with given id not found."
        "500":
          description: "Could not save changes at the moment, try again."
      security:
        - apiKey: [writer, read]
  /register/new_writer:
    put:
      tags:
        - "Writer"
      summary: "Become a KiddiePad writer"
      description: "Must be less than 18 years old in order to be a writer."
      operationId: "becomeWriter"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: body
          required: true
          description: "email, bio, and location are required"
          schema:
            required:
              - "email"
              - "bio"
              - "location"
            properties:
              email:
                type: string
                description: "Must be a valid email and the one used during sign up"
              bio:
                type: string
                description: "This helps the readers know more about the writer."
                maxLength: 2000
              location:
                type: string
                description: "The writer's home address"
      responses:
        "204":
          description: "User has successfully become a writer."
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "You are not eligible to become a KiddiePad writer. Must be less than 18 years."
        "403":
          description: "User is already a writer."
        "409":
          description: "Both user's bio and location are required."
        "500":
          description: "Could not create writer; Try again."
      security:
        - apiKey: [write, read]
  /writers:
    get:
      tags:
        - "Writer"
      summary: "Get all KiddiePad writers"
      operationId: "getWriters"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation."
          schema:
            $ref: "#/definitions/User"
        "500":
          description: "Could not get the list of writers."
      security:
        - apiKey: [write, read]
  /writers/{writerId}:
    get:
      tags:
        - "Writer"
      summary: "Find a writer by Id"
      operationId: "getWriterById"
      produces:
        - "application/json"
      parameters:
        - name: "writerId"
          in: path
          description: "ID of the KiddiePad writer that needs to be fetched"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "Writer with given id not found."
        "500":
          description: "Could not get writer's details."
      security:
        - apiKey: [write, read]
  /books/create_new:
    post:
      tags:
        - "Book"
      summary: "Create a new book."
      description: "This endpoint is only viable for KiddiePad writers. To create a book as a normal user, you must become a writer"
      operationId: "createNewBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "body"
          description: "Data required to create a new book."
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "User could not be updated, though book has been created."
        "401":
          description: "title, category, desc, and audience required."
        "403":
          description: "User is not a registered kiddiepad writer."
        "404":
          description: "Could not create book; Check that book with the same title does not already exist."
        "500":
          description: "Could not find user."
  /books/{title}:
    get:
      tags:
        - "Book"
      summary: "Find book by title"
      description: "Returns a single book"
      operationId: "getBookByTitle"
      produces:
        - "application/json"
      parameters:
        - name: "title"
          in: path
          description: "The title of the book to return"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "404":
          description: "Book with given title not found."
        "500":
          description: "Could not fetch book."
      security:
        - apiKey: [write, read]

  /books/{keyword}/search:
    get:
      tags:
        - "Book"
      summary: "Find books by keyword"
      description: "Returns a list of book"
      operationId: "getBooksByKeyword"
      produces:
        - "application/json"
      parameters:
        - name: "keyword"
          in: path
          description: "The keyword to search books by"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            description: "Contains the length of books list returned and the list of books"
            properties:
              length:
                type: integer
                default: 0
              result:
                type: array
                items:
                  $ref: "#/definitions/Book"
        "400":
          description: "Search keyword required to lookup books."
        "500":
          description: "Could not get books at the moment, try again."
      security:
        - apiKey: [write, read]
  /books/{bookId}/delete:
    delete:
      tags:
        - "Book"
      summary: "Delete a book by ID"
      description: "Note that a published book cannot be deleted."
      operationId: "deleteBook"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: path
          description: "The ID of the book to be deleted"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "Changes could not be made to user at the moment."
        "404":
          description: "Book with given id does not exist"
        "500":
          description: "Could not delete chapters associated with book."
      security:
        - apiKey: [write, read]
  /books/{bookId}/publish:
    put:
      tags:
        - "Book"
      summary: "Publish the book with given id"
      description: "Set the published field of a book to true"
      operationId: "publishBook"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: path
          description: "The id of the book to be published"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "404":
          description: "Book with given id not found."
        "500":
          description: "Could not save requested changes on book."
      security:
        - apiKey: [write, read]
  /books/{bookId}/read:
    get:
      tags:
        - "Book"
      summary: "returns a book chapters for readers to read"
      operationId: "readBook"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: path
          description: "The id of the book to be published"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            description: "Some info along with the chapters"
            properties: 
              noOfChapters:
                type: integer
                default: 0
              chapters:
                type: array
                items: 
                  $ref: "#/definitions/Chapter"
              title:
                type: string
              author:
                type: string
      security:
        - apiKey: [write, read]
      
  /books/{bookId}/{shareOrView}:
    put:
      tags:
        - "Book"
      summary: "returns the modified book"
      description: "Returns the result of incrementing the number of shares or views of the book with given id"
      operationId: "shareOrViewBook"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: path
          description: "The id of the book whose shares or views field is to be modified"
          required: true
          type: string
        - name: "shareOrView"
          in: path
          description: "Must be either the value 'share' or 'view'"
          required: true
          type: string
          enum:
            - view
            - share
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "shareOrView not in ['share', 'view']"
        "404":
          description: "Book with given id not found. Note that book must be published."
        "500":
          description: "Could not update number of {shares}/{views}."
      security:
        - apiKey: [write, read]
  /books/{bookId}/chapters/create_new:
    post:
      tags:
        - "Chapter"
      summary: "create a new chapter within a book"
      operationId: "createChapter"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: path
          required: true
          description: "The id of the book that chapter is to be created for."
          type: string
        - in: body
          name: body
          description: "body is required, but title is not"
          schema:
            type: object
            description: "The title and body of the newly created chapter"
            properties: 
              title:
                type: string
                maxLength: 255
              body:
                type: string
                required: true
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Chapter"
        "400":
          description: "Could not find book; Check that book id is valid."
        "403":
          description: "chapter body must be provided."
        "404":
          description: "Book not found."
        "405":
          description: "valid parameters are title and body."
        "500":
          description: "Could not save new chapter; Check that chapter title or body is not duplicated."
      security:
        - apiKey: [write, read]
  /book/chapters/{chapterId}/delete:
    delete:
      tags:
        - "Chapter"
      description: "Please note that not all responses stated throughout the API docs are exactly correct"
      summary: "delete a chapter and its record from the associated book"
      operationId: "deleteChapter"
      produces:
        - "application/json"
      parameters:
        - name: "chapterId"
          in: path
          description: "The id of the chapter to be deleted"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Chapter"
        "404":
          description: "Chapter with given id does not exist."
        "500":
          description: "Could save changes made to the book."
      security:
        - apiKey: [write, read]
  /book/chapters/{chapterId}/update:
    put:
      tags:
        - "Chapter"
      summary: "updates the content of a chapter whose id was provided"
      operationId: "updateChapter"
      produces:
        - "application/json"
      parameters:
        - name: "chapterId"
          in: path
          description: "The id of the chapter to be updated"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Chapter"
        "400":
          description: "content to update chapter is needed."
        "417":
          description: "content is the same as the chapter body."
        "500":
          description: "Could not update chapter with new content."
      security:
        - apiKey: [write, read]
  /reviews/create_new:
    post:
      tags:
        - "Review"
      summary: "create a review for a book"
      operationId: "createReview"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "body"
          required: true
          description: "The data that will be required to create a review"
          schema:
            $ref: "#/definitions/Review"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Review"
        "400":
          description: "rating or comment is needed."
        "404":
          description: "Could not find user with given id."
        "500":
          description: "Could not create new review at the moment, try again."
      security:
        - apiKey: [write, read]
  /reviews/{reviewId}/delete:
    delete:
      tags:
        - "Review"
      summary: "delete a book review"
      operationId: "deleteReview"
      produces:
        - "application/json"
      parameters:
        - name: "reviewId"
          in: path
          description: "The id of the review to be deleted"
          required: true
          type: string
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Review"
        "400":
          description: "Could not delete review, check that review id is correct."
        "404":
          description: "Could not find review with given id."
        "500":
          description: "Could not update book with changes."
      security:
        - apiKey: [write, read]

definitions:
  User:
    type: object
    properties:
      firstName:
        type: "string"
        maxLength: 100
      lastName:
        type: "string"
        maxLength: 100
      username:
        type: "string"
        description: "A user's username must be unique"
        maxLength: 100
      birthDate:
        type: string
        format: "date"
      email:
        type: "string"
        # pattern: '/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/'
      password:
        type: "string"
        # format: password
        # writeOnly: true
      isWriter:
        type: boolean
        default: false
      isVolunteer:
        type: boolean
        default: false
      isDonator:
        type: boolean
        default: false
      bio:
        type: string
        maxLength: 2000
      photo:
        type: string
        format: file
      location:
        type: string
      noOfFollowers:
        type: integer
        default: 0
      followers:
        type: array
        items:
          $ref: "#/definitions/User"
      acceptDonation:
        type: boolean
        default: false
      startedWriting:
        type: string
        format: date
      books:
        type: array
        items:
          $ref: "#/definitions/Book"
    example:
      firstName: "Kiddie"
      lastName: "Pad"
      username: "kiddiepad"
      email: "kiddiepad@gmail.com"
      birthDate: "2022-09-08"
      password: "kiddie123"

  Book:
    type: object
    properties:
      title:
        type: string
        required: true
        maxLength: 255
      authorId:
        type: string
        required: true
      noOfChapters:
        type: integer
        default: 0
      category:
        type: string
        required: true
      cover:
        type: string
        format: file
      published:
        type: boolean
        default: false
      desc:
        type: string
        required: true
        maxLength: 3000
      price:
        type: number
        format: double
        default: 0
      views:
        type: integer
        default: 0
      shares:
        type: integer
        default: 0
      audience:
        type: string
        required: true
        enum:
          - "kids"
          - "children"
          - "teens"
          - "adults"
      chapters:
        type: array
        items:
          $ref: "#/definitions/Chapter"
      reviews:
        type: array
        items:
          $ref: "#/definitions/Review"
    example:
      title: "New book"
      authorId: "74h474hhik2872uj22"
      category: "action"
      desc: "This is a new book"
      audience: "children"

  Chapter:
    type: object
    properties:
      bookId:
        type: string
        required: true
      number:
        type: integer
        default: 1
      noOfPages:
        type: integer
        default: 1
      title:
        type: string
        maxLength: 255
      body:
        type: string
        required: true

  Review:
    type: object
    properties:
      userId:
        type: string
        required: true
      ratingScore:
        type: number
        format: float
        minimum: 0
        maximum: 5
        default: 0
        required: true
      comment:
        type: string
        maxLength: 500
      bookId:
        type: string
        required: true
      votes:
        type: integer
        default: 0
        readOnly: true
